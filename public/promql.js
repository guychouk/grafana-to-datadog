/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function (expectation) {
      return '"' + literalEscape(expectation.text) + '"';
    },

    class: function (expectation) {
      var escapedParts = "",
        i;

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts +=
          expectation.parts[i] instanceof Array
            ? classEscape(expectation.parts[i][0]) +
              "-" +
              classEscape(expectation.parts[i][1])
            : classEscape(expectation.parts[i]);
      }

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function (expectation) {
      return "any character";
    },

    end: function (expectation) {
      return "end of input";
    },

    other: function (expectation) {
      return expectation.description;
    },
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g, '\\"')
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g, function (ch) {
        return "\\x0" + hex(ch);
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return "\\x" + hex(ch);
      });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g, "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g, function (ch) {
        return "\\x0" + hex(ch);
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return "\\x" + hex(ch);
      });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
      i,
      j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return (
          descriptions.slice(0, -1).join(", ") +
          ", or " +
          descriptions[descriptions.length - 1]
        );
    }
  }

  function describeFound(found) {
    return found ? '"' + literalEscape(found) + '"' : "end of input";
  }

  return (
    "Expected " +
    describeExpected(expected) +
    " but " +
    describeFound(found) +
    " found."
  );
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},
    peg$startRuleFunctions = { start: peg$parsestart },
    peg$startRuleFunction = peg$parsestart,
    peg$c0 = function (e) {
      return e;
    },
    peg$c1 = function (aggregator, modifier, body) {
      return { aggregator, body, ...modifier };
    },
    peg$c2 = function (aggregator, body, modifier) {
      return { aggregator, body, ...modifier };
    },
    peg$c3 = function (aggregator, body) {
      return { aggregator, body };
    },
    peg$c4 = "by",
    peg$c5 = peg$literalExpectation("by", false),
    peg$c6 = function (aggregate_modifier, labels) {
      return { aggregate_modifier, labels };
    },
    peg$c7 = "without",
    peg$c8 = peg$literalExpectation("without", false),
    peg$c9 = function (left, op, right) {
      return { left, op, right };
    },
    peg$c10 = "(",
    peg$c11 = peg$literalExpectation("(", false),
    peg$c12 = ")",
    peg$c13 = peg$literalExpectation(")", false),
    peg$c14 = function (expr) {
      return expr;
    },
    peg$c15 = function (func, body) {
      return { func, body };
    },
    peg$c16 = function (args) {
      return args;
    },
    peg$c17 = function () {},
    peg$c18 = ",",
    peg$c19 = peg$literalExpectation(",", false),
    peg$c20 = function (args) {
      return args.map((arg) => arg[0]);
    },
    peg$c21 = "[",
    peg$c22 = peg$literalExpectation("[", false),
    peg$c23 = "]",
    peg$c24 = peg$literalExpectation("]", false),
    peg$c25 = function (selector, range) {
      return { ...selector, range };
    },
    peg$c26 = function (metric, selectors) {
      return { metric, selectors };
    },
    peg$c27 = function (metric) {
      return { metric };
    },
    peg$c28 = function (selectors) {
      return { selectors };
    },
    peg$c29 = "{",
    peg$c30 = peg$literalExpectation("{", false),
    peg$c31 = "}",
    peg$c32 = peg$literalExpectation("}", false),
    peg$c33 = function (labels) {
      return labels.map((l) => l[0]);
    },
    peg$c34 = function () {
      return [];
    },
    peg$c35 = function (label, op, value) {
      return { label, op, value };
    },
    peg$c36 = /^[a-zA-Z_]/,
    peg$c37 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
    peg$c38 = function (chars) {
      return chars.join("");
    },
    peg$c39 = /^[a-zA-Z0-9_:]/,
    peg$c40 = peg$classExpectation(
      [["a", "z"], ["A", "Z"], ["0", "9"], "_", ":"],
      false,
      false
    ),
    peg$c41 = '"',
    peg$c42 = peg$literalExpectation('"', false),
    peg$c43 = /^[a-zA-Z0-9\-_.*(){}$\/]/,
    peg$c44 = peg$classExpectation(
      [
        ["a", "z"],
        ["A", "Z"],
        ["0", "9"],
        "-",
        "_",
        ".",
        "*",
        "(",
        ")",
        "{",
        "}",
        "$",
        "/",
      ],
      false,
      false
    ),
    peg$c45 = "'",
    peg$c46 = peg$literalExpectation("'", false),
    peg$c47 = /^[0-9]/,
    peg$c48 = peg$classExpectation([["0", "9"]], false, false),
    peg$c49 = function (digits) {
      return parseInt(digits.join(""), 10);
    },
    peg$c50 = peg$otherExpectation("whitespace"),
    peg$c51 = /^[ \t\n\r]/,
    peg$c52 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
    peg$c53 = "y",
    peg$c54 = peg$literalExpectation("y", false),
    peg$c55 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "years" };
    },
    peg$c56 = "w",
    peg$c57 = peg$literalExpectation("w", false),
    peg$c58 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "weeks" };
    },
    peg$c59 = "d",
    peg$c60 = peg$literalExpectation("d", false),
    peg$c61 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "days" };
    },
    peg$c62 = "h",
    peg$c63 = peg$literalExpectation("h", false),
    peg$c64 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "hours" };
    },
    peg$c65 = "m",
    peg$c66 = peg$literalExpectation("m", false),
    peg$c67 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "minutes" };
    },
    peg$c68 = "s",
    peg$c69 = peg$literalExpectation("s", false),
    peg$c70 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "seconds" };
    },
    peg$c71 = "ms",
    peg$c72 = peg$literalExpectation("ms", false),
    peg$c73 = function (digits) {
      return { duration: parseInt(digits.join(""), 10), unit: "miliseconds" };
    },
    peg$c74 = "-",
    peg$c75 = peg$literalExpectation("-", false),
    peg$c76 = "+",
    peg$c77 = peg$literalExpectation("+", false),
    peg$c78 = "*",
    peg$c79 = peg$literalExpectation("*", false),
    peg$c80 = "%",
    peg$c81 = peg$literalExpectation("%", false),
    peg$c82 = "/",
    peg$c83 = peg$literalExpectation("/", false),
    peg$c84 = "==",
    peg$c85 = peg$literalExpectation("==", false),
    peg$c86 = "!=",
    peg$c87 = peg$literalExpectation("!=", false),
    peg$c88 = "<=",
    peg$c89 = peg$literalExpectation("<=", false),
    peg$c90 = "<",
    peg$c91 = peg$literalExpectation("<", false),
    peg$c92 = ">=",
    peg$c93 = peg$literalExpectation(">=", false),
    peg$c94 = ">",
    peg$c95 = peg$literalExpectation(">", false),
    peg$c96 = "=~",
    peg$c97 = peg$literalExpectation("=~", false),
    peg$c98 = "=",
    peg$c99 = peg$literalExpectation("=", false),
    peg$c100 = "!~",
    peg$c101 = peg$literalExpectation("!~", false),
    peg$c102 = "^",
    peg$c103 = peg$literalExpectation("^", false),
    peg$c104 = "sum",
    peg$c105 = peg$literalExpectation("sum", false),
    peg$c106 = "min",
    peg$c107 = peg$literalExpectation("min", false),
    peg$c108 = "max",
    peg$c109 = peg$literalExpectation("max", false),
    peg$c110 = "avg",
    peg$c111 = peg$literalExpectation("avg", false),
    peg$c112 = "group",
    peg$c113 = peg$literalExpectation("group", false),
    peg$c114 = "stddev",
    peg$c115 = peg$literalExpectation("stddev", false),
    peg$c116 = "stdvar",
    peg$c117 = peg$literalExpectation("stdvar", false),
    peg$c118 = "count",
    peg$c119 = peg$literalExpectation("count", false),
    peg$c120 = "count_values",
    peg$c121 = peg$literalExpectation("count_values", false),
    peg$c122 = "bottomk",
    peg$c123 = peg$literalExpectation("bottomk", false),
    peg$c124 = "topk",
    peg$c125 = peg$literalExpectation("topk", false),
    peg$c126 = "quantile",
    peg$c127 = peg$literalExpectation("quantile", false),
    peg$c128 = "abs",
    peg$c129 = peg$literalExpectation("abs", false),
    peg$c130 = "absent",
    peg$c131 = peg$literalExpectation("absent", false),
    peg$c132 = "absent_over_time",
    peg$c133 = peg$literalExpectation("absent_over_time", false),
    peg$c134 = "ceil",
    peg$c135 = peg$literalExpectation("ceil", false),
    peg$c136 = "changes",
    peg$c137 = peg$literalExpectation("changes", false),
    peg$c138 = "clamp",
    peg$c139 = peg$literalExpectation("clamp", false),
    peg$c140 = "clamp_max",
    peg$c141 = peg$literalExpectation("clamp_max", false),
    peg$c142 = "clamp_min",
    peg$c143 = peg$literalExpectation("clamp_min", false),
    peg$c144 = "day_of_month",
    peg$c145 = peg$literalExpectation("day_of_month", false),
    peg$c146 = "day_of_week",
    peg$c147 = peg$literalExpectation("day_of_week", false),
    peg$c148 = "days_in_month",
    peg$c149 = peg$literalExpectation("days_in_month", false),
    peg$c150 = "delta",
    peg$c151 = peg$literalExpectation("delta", false),
    peg$c152 = "deriv",
    peg$c153 = peg$literalExpectation("deriv", false),
    peg$c154 = "exp",
    peg$c155 = peg$literalExpectation("exp", false),
    peg$c156 = "floor",
    peg$c157 = peg$literalExpectation("floor", false),
    peg$c158 = "histogram_quantile",
    peg$c159 = peg$literalExpectation("histogram_quantile", false),
    peg$c160 = "holt_winters",
    peg$c161 = peg$literalExpectation("holt_winters", false),
    peg$c162 = "hour",
    peg$c163 = peg$literalExpectation("hour", false),
    peg$c164 = "idelta",
    peg$c165 = peg$literalExpectation("idelta", false),
    peg$c166 = "increase",
    peg$c167 = peg$literalExpectation("increase", false),
    peg$c168 = "irate",
    peg$c169 = peg$literalExpectation("irate", false),
    peg$c170 = "label_join",
    peg$c171 = peg$literalExpectation("label_join", false),
    peg$c172 = "label_replace",
    peg$c173 = peg$literalExpectation("label_replace", false),
    peg$c174 = "ln",
    peg$c175 = peg$literalExpectation("ln", false),
    peg$c176 = "log2",
    peg$c177 = peg$literalExpectation("log2", false),
    peg$c178 = "log10",
    peg$c179 = peg$literalExpectation("log10", false),
    peg$c180 = "minute",
    peg$c181 = peg$literalExpectation("minute", false),
    peg$c182 = "month",
    peg$c183 = peg$literalExpectation("month", false),
    peg$c184 = "predict_linear",
    peg$c185 = peg$literalExpectation("predict_linear", false),
    peg$c186 = "rate",
    peg$c187 = peg$literalExpectation("rate", false),
    peg$c188 = "resets",
    peg$c189 = peg$literalExpectation("resets", false),
    peg$c190 = "round",
    peg$c191 = peg$literalExpectation("round", false),
    peg$c192 = "scalar",
    peg$c193 = peg$literalExpectation("scalar", false),
    peg$c194 = "sgn",
    peg$c195 = peg$literalExpectation("sgn", false),
    peg$c196 = "sort",
    peg$c197 = peg$literalExpectation("sort", false),
    peg$c198 = "sort_desc",
    peg$c199 = peg$literalExpectation("sort_desc", false),
    peg$c200 = "sqrt",
    peg$c201 = peg$literalExpectation("sqrt", false),
    peg$c202 = "time",
    peg$c203 = peg$literalExpectation("time", false),
    peg$c204 = "timestamp",
    peg$c205 = peg$literalExpectation("timestamp", false),
    peg$c206 = "vector",
    peg$c207 = peg$literalExpectation("vector", false),
    peg$c208 = "year",
    peg$c209 = peg$literalExpectation("year", false),
    peg$currPos = 0,
    peg$savedPos = 0,
    peg$posDetailsCache = [{ line: 1, column: 1 }],
    peg$maxFailPos = 0,
    peg$maxFailExpected = [],
    peg$silentFails = 0,
    peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error(
        "Can't start parsing from rule \"" + options.startRule + '".'
      );
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location =
      location !== void 0
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location =
      location !== void 0
        ? location
        : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return {
      type: "class",
      parts: parts,
      inverted: inverted,
      ignoreCase: ignoreCase,
    };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
      p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
      endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpr() {
    var s0;

    s0 = peg$parseBinaryExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parseParenExpr();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNumberLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStringLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAggregateExpr();
            if (s0 === peg$FAILED) {
              s0 = peg$parseFunctionCall();
              if (s0 === peg$FAILED) {
                s0 = peg$parseMatrixSelector();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseVectorSelector();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAggregateExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseAggregateOp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAggregateModifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionCallBody();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseAggregateOp();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionCallBody();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAggregateModifier();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c2(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAggregateOp();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseFunctionCallBody();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseAggregateModifier() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c4) {
        s2 = peg$c4;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c5);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseGroupingLabels();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c7) {
          s2 = peg$c7;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c8);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseGroupingLabels();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c6(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseBinaryExpr() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseParenExpr();
    if (s1 === peg$FAILED) {
      s1 = peg$parseNumberLiteral();
      if (s1 === peg$FAILED) {
        s1 = peg$parseAggregateExpr();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFunctionCall();
          if (s1 === peg$FAILED) {
            s1 = peg$parseMatrixSelector();
            if (s1 === peg$FAILED) {
              s1 = peg$parseVectorSelector();
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBinaryOp();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExpr();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c9(s1, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseParenExpr() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c11);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpr();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c12;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c13);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionCall() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFunctionIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionCallBody();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c15(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunctionCallBody() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c10;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c11);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFunctionCallArgs();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c12;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c13);
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c10;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c11);
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s2 = peg$c12;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c13);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseFunctionCallArgs() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parseFunctionCall();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseExpr();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parseExpr();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c18;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseMatrixSelector() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseVectorSelector();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c22);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDuration();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDuration();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c23;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c24);
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVectorSelector() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLabelMatchers();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIdentifier();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c27(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLabelMatchers();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseLabelMatchers() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c29;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c30);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseLabelMatcher();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseLabelMatcher();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c18;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c31;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c32);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c29;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c30);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c31;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c32);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c34();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLabelMatcher() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseLabelName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseMatchOp();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseStringLiteral();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c35(s2, s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGroupingLabels() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c11);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseLabelName();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c18;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c19);
          }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseLabelName();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c18;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c19);
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c12;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c13);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLabelName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c36.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c37);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c36.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c37);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c39.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c40);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c39.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c40);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c38(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c42);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c43.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c44);
        }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c43.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c44);
            }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c41;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c42);
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c38(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c46);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c43.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c44);
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c43.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c44);
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c45;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c46);
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c38(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseNumberLiteral() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c47.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c48);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c48);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c49(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c51.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c52);
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c51.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c52);
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c50);
      }
    }

    return s0;
  }

  function peg$parseDuration() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c47.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c48);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c48);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 121) {
        s2 = peg$c53;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c54);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$c47.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c48);
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c48);
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 119) {
          s2 = peg$c56;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c57);
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c47.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c48);
          }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c47.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c48);
              }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 100) {
            s2 = peg$c59;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c60);
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          if (peg$c47.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c48);
            }
          }
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              if (peg$c47.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c48);
                }
              }
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 104) {
              s2 = peg$c62;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c63);
              }
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c64(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (peg$c47.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c48);
              }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c47.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c48);
                  }
                }
              }
            } else {
              s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 109) {
                s2 = peg$c65;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c66);
                }
              }
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c67(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = [];
              if (peg$c47.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c48);
                }
              }
              if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  if (peg$c47.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c48);
                    }
                  }
                }
              } else {
                s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 115) {
                  s2 = peg$c68;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c69);
                  }
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c70(s1);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                if (peg$c47.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c48);
                  }
                }
                if (s2 !== peg$FAILED) {
                  while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c47.test(input.charAt(peg$currPos))) {
                      s2 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c48);
                      }
                    }
                  }
                } else {
                  s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c71) {
                    s2 = peg$c71;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c72);
                    }
                  }
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c73(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBinaryOp() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c74;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c75);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c76;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c77);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c78;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c79);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 37) {
            s0 = peg$c80;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c81);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s0 = peg$c82;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c83);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c84) {
                s0 = peg$c84;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c85);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c86) {
                  s0 = peg$c86;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c87);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c88) {
                    s0 = peg$c88;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c89);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 60) {
                      s0 = peg$c90;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c92) {
                        s0 = peg$c92;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c93);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                          s0 = peg$c94;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c95);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c96) {
                            s0 = peg$c96;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c97);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 61) {
                              s0 = peg$c98;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c99);
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c100) {
                                s0 = peg$c100;
                                peg$currPos += 2;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c101);
                                }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 94) {
                                  s0 = peg$c102;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c103);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMatchOp() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c84) {
      s0 = peg$c84;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c85);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c86) {
        s0 = peg$c86;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c87);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s0 = peg$c94;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c95);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c90;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c91);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c92) {
              s0 = peg$c92;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c93);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c88) {
                s0 = peg$c88;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c89);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c96) {
                  s0 = peg$c96;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c97);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c100) {
                    s0 = peg$c100;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c101);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s0 = peg$c98;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c99);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAggregateOp() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c104) {
      s0 = peg$c104;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c105);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c106) {
        s0 = peg$c106;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c107);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c108) {
          s0 = peg$c108;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c109);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c110) {
            s0 = peg$c110;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c111);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c112) {
              s0 = peg$c112;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c113);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c114) {
                s0 = peg$c114;
                peg$currPos += 6;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c115);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c116) {
                  s0 = peg$c116;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c117);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c118) {
                    s0 = peg$c118;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c119);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 12) === peg$c120) {
                      s0 = peg$c120;
                      peg$currPos += 12;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c121);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 7) === peg$c122) {
                        s0 = peg$c122;
                        peg$currPos += 7;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c123);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c124) {
                          s0 = peg$c124;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c125);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 8) === peg$c126) {
                            s0 = peg$c126;
                            peg$currPos += 8;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c127);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseFunctionIdentifier() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c128) {
      s0 = peg$c128;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c129);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c130) {
        s0 = peg$c130;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c131);
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 16) === peg$c132) {
          s0 = peg$c132;
          peg$currPos += 16;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c133);
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c134) {
            s0 = peg$c134;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c135);
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 7) === peg$c136) {
              s0 = peg$c136;
              peg$currPos += 7;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c137);
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c138) {
                s0 = peg$c138;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c139);
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 9) === peg$c140) {
                  s0 = peg$c140;
                  peg$currPos += 9;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c141);
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c142) {
                    s0 = peg$c142;
                    peg$currPos += 9;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c143);
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 12) === peg$c144) {
                      s0 = peg$c144;
                      peg$currPos += 12;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c145);
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 11) === peg$c146) {
                        s0 = peg$c146;
                        peg$currPos += 11;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c147);
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 13) === peg$c148) {
                          s0 = peg$c148;
                          peg$currPos += 13;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c149);
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c150) {
                            s0 = peg$c150;
                            peg$currPos += 5;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c151);
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c152) {
                              s0 = peg$c152;
                              peg$currPos += 5;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c153);
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3) === peg$c154) {
                                s0 = peg$c154;
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c155);
                                }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c156) {
                                  s0 = peg$c156;
                                  peg$currPos += 5;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c157);
                                  }
                                }
                                if (s0 === peg$FAILED) {
                                  if (
                                    input.substr(peg$currPos, 18) === peg$c158
                                  ) {
                                    s0 = peg$c158;
                                    peg$currPos += 18;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$c159);
                                    }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (
                                      input.substr(peg$currPos, 12) === peg$c160
                                    ) {
                                      s0 = peg$c160;
                                      peg$currPos += 12;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$c161);
                                      }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (
                                        input.substr(peg$currPos, 4) ===
                                        peg$c162
                                      ) {
                                        s0 = peg$c162;
                                        peg$currPos += 4;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c163);
                                        }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (
                                          input.substr(peg$currPos, 6) ===
                                          peg$c164
                                        ) {
                                          s0 = peg$c164;
                                          peg$currPos += 6;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$c165);
                                          }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (
                                            input.substr(peg$currPos, 8) ===
                                            peg$c166
                                          ) {
                                            s0 = peg$c166;
                                            peg$currPos += 8;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$c167);
                                            }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (
                                              input.substr(peg$currPos, 5) ===
                                              peg$c168
                                            ) {
                                              s0 = peg$c168;
                                              peg$currPos += 5;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$c169);
                                              }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (
                                                input.substr(
                                                  peg$currPos,
                                                  10
                                                ) === peg$c170
                                              ) {
                                                s0 = peg$c170;
                                                peg$currPos += 10;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                  peg$fail(peg$c171);
                                                }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (
                                                  input.substr(
                                                    peg$currPos,
                                                    13
                                                  ) === peg$c172
                                                ) {
                                                  s0 = peg$c172;
                                                  peg$currPos += 13;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) {
                                                    peg$fail(peg$c173);
                                                  }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (
                                                    input.substr(
                                                      peg$currPos,
                                                      2
                                                    ) === peg$c174
                                                  ) {
                                                    s0 = peg$c174;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                      peg$fail(peg$c175);
                                                    }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (
                                                      input.substr(
                                                        peg$currPos,
                                                        4
                                                      ) === peg$c176
                                                    ) {
                                                      s0 = peg$c176;
                                                      peg$currPos += 4;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (
                                                        peg$silentFails === 0
                                                      ) {
                                                        peg$fail(peg$c177);
                                                      }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (
                                                        input.substr(
                                                          peg$currPos,
                                                          5
                                                        ) === peg$c178
                                                      ) {
                                                        s0 = peg$c178;
                                                        peg$currPos += 5;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (
                                                          peg$silentFails === 0
                                                        ) {
                                                          peg$fail(peg$c179);
                                                        }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (
                                                          input.substr(
                                                            peg$currPos,
                                                            3
                                                          ) === peg$c108
                                                        ) {
                                                          s0 = peg$c108;
                                                          peg$currPos += 3;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (
                                                            peg$silentFails ===
                                                            0
                                                          ) {
                                                            peg$fail(peg$c109);
                                                          }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (
                                                            input.substr(
                                                              peg$currPos,
                                                              6
                                                            ) === peg$c180
                                                          ) {
                                                            s0 = peg$c180;
                                                            peg$currPos += 6;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (
                                                              peg$silentFails ===
                                                              0
                                                            ) {
                                                              peg$fail(
                                                                peg$c181
                                                              );
                                                            }
                                                          }
                                                          if (
                                                            s0 === peg$FAILED
                                                          ) {
                                                            if (
                                                              input.substr(
                                                                peg$currPos,
                                                                5
                                                              ) === peg$c182
                                                            ) {
                                                              s0 = peg$c182;
                                                              peg$currPos += 5;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (
                                                                peg$silentFails ===
                                                                0
                                                              ) {
                                                                peg$fail(
                                                                  peg$c183
                                                                );
                                                              }
                                                            }
                                                            if (
                                                              s0 === peg$FAILED
                                                            ) {
                                                              if (
                                                                input.substr(
                                                                  peg$currPos,
                                                                  14
                                                                ) === peg$c184
                                                              ) {
                                                                s0 = peg$c184;
                                                                peg$currPos += 14;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (
                                                                  peg$silentFails ===
                                                                  0
                                                                ) {
                                                                  peg$fail(
                                                                    peg$c185
                                                                  );
                                                                }
                                                              }
                                                              if (
                                                                s0 ===
                                                                peg$FAILED
                                                              ) {
                                                                if (
                                                                  input.substr(
                                                                    peg$currPos,
                                                                    4
                                                                  ) === peg$c186
                                                                ) {
                                                                  s0 = peg$c186;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s0 =
                                                                    peg$FAILED;
                                                                  if (
                                                                    peg$silentFails ===
                                                                    0
                                                                  ) {
                                                                    peg$fail(
                                                                      peg$c187
                                                                    );
                                                                  }
                                                                }
                                                                if (
                                                                  s0 ===
                                                                  peg$FAILED
                                                                ) {
                                                                  if (
                                                                    input.substr(
                                                                      peg$currPos,
                                                                      6
                                                                    ) ===
                                                                    peg$c188
                                                                  ) {
                                                                    s0 =
                                                                      peg$c188;
                                                                    peg$currPos += 6;
                                                                  } else {
                                                                    s0 =
                                                                      peg$FAILED;
                                                                    if (
                                                                      peg$silentFails ===
                                                                      0
                                                                    ) {
                                                                      peg$fail(
                                                                        peg$c189
                                                                      );
                                                                    }
                                                                  }
                                                                  if (
                                                                    s0 ===
                                                                    peg$FAILED
                                                                  ) {
                                                                    if (
                                                                      input.substr(
                                                                        peg$currPos,
                                                                        5
                                                                      ) ===
                                                                      peg$c190
                                                                    ) {
                                                                      s0 =
                                                                        peg$c190;
                                                                      peg$currPos += 5;
                                                                    } else {
                                                                      s0 =
                                                                        peg$FAILED;
                                                                      if (
                                                                        peg$silentFails ===
                                                                        0
                                                                      ) {
                                                                        peg$fail(
                                                                          peg$c191
                                                                        );
                                                                      }
                                                                    }
                                                                    if (
                                                                      s0 ===
                                                                      peg$FAILED
                                                                    ) {
                                                                      if (
                                                                        input.substr(
                                                                          peg$currPos,
                                                                          6
                                                                        ) ===
                                                                        peg$c192
                                                                      ) {
                                                                        s0 =
                                                                          peg$c192;
                                                                        peg$currPos += 6;
                                                                      } else {
                                                                        s0 =
                                                                          peg$FAILED;
                                                                        if (
                                                                          peg$silentFails ===
                                                                          0
                                                                        ) {
                                                                          peg$fail(
                                                                            peg$c193
                                                                          );
                                                                        }
                                                                      }
                                                                      if (
                                                                        s0 ===
                                                                        peg$FAILED
                                                                      ) {
                                                                        if (
                                                                          input.substr(
                                                                            peg$currPos,
                                                                            3
                                                                          ) ===
                                                                          peg$c194
                                                                        ) {
                                                                          s0 =
                                                                            peg$c194;
                                                                          peg$currPos += 3;
                                                                        } else {
                                                                          s0 =
                                                                            peg$FAILED;
                                                                          if (
                                                                            peg$silentFails ===
                                                                            0
                                                                          ) {
                                                                            peg$fail(
                                                                              peg$c195
                                                                            );
                                                                          }
                                                                        }
                                                                        if (
                                                                          s0 ===
                                                                          peg$FAILED
                                                                        ) {
                                                                          if (
                                                                            input.substr(
                                                                              peg$currPos,
                                                                              4
                                                                            ) ===
                                                                            peg$c196
                                                                          ) {
                                                                            s0 =
                                                                              peg$c196;
                                                                            peg$currPos += 4;
                                                                          } else {
                                                                            s0 =
                                                                              peg$FAILED;
                                                                            if (
                                                                              peg$silentFails ===
                                                                              0
                                                                            ) {
                                                                              peg$fail(
                                                                                peg$c197
                                                                              );
                                                                            }
                                                                          }
                                                                          if (
                                                                            s0 ===
                                                                            peg$FAILED
                                                                          ) {
                                                                            if (
                                                                              input.substr(
                                                                                peg$currPos,
                                                                                9
                                                                              ) ===
                                                                              peg$c198
                                                                            ) {
                                                                              s0 =
                                                                                peg$c198;
                                                                              peg$currPos += 9;
                                                                            } else {
                                                                              s0 =
                                                                                peg$FAILED;
                                                                              if (
                                                                                peg$silentFails ===
                                                                                0
                                                                              ) {
                                                                                peg$fail(
                                                                                  peg$c199
                                                                                );
                                                                              }
                                                                            }
                                                                            if (
                                                                              s0 ===
                                                                              peg$FAILED
                                                                            ) {
                                                                              if (
                                                                                input.substr(
                                                                                  peg$currPos,
                                                                                  4
                                                                                ) ===
                                                                                peg$c200
                                                                              ) {
                                                                                s0 =
                                                                                  peg$c200;
                                                                                peg$currPos += 4;
                                                                              } else {
                                                                                s0 =
                                                                                  peg$FAILED;
                                                                                if (
                                                                                  peg$silentFails ===
                                                                                  0
                                                                                ) {
                                                                                  peg$fail(
                                                                                    peg$c201
                                                                                  );
                                                                                }
                                                                              }
                                                                              if (
                                                                                s0 ===
                                                                                peg$FAILED
                                                                              ) {
                                                                                if (
                                                                                  input.substr(
                                                                                    peg$currPos,
                                                                                    4
                                                                                  ) ===
                                                                                  peg$c202
                                                                                ) {
                                                                                  s0 =
                                                                                    peg$c202;
                                                                                  peg$currPos += 4;
                                                                                } else {
                                                                                  s0 =
                                                                                    peg$FAILED;
                                                                                  if (
                                                                                    peg$silentFails ===
                                                                                    0
                                                                                  ) {
                                                                                    peg$fail(
                                                                                      peg$c203
                                                                                    );
                                                                                  }
                                                                                }
                                                                                if (
                                                                                  s0 ===
                                                                                  peg$FAILED
                                                                                ) {
                                                                                  if (
                                                                                    input.substr(
                                                                                      peg$currPos,
                                                                                      9
                                                                                    ) ===
                                                                                    peg$c204
                                                                                  ) {
                                                                                    s0 =
                                                                                      peg$c204;
                                                                                    peg$currPos += 9;
                                                                                  } else {
                                                                                    s0 =
                                                                                      peg$FAILED;
                                                                                    if (
                                                                                      peg$silentFails ===
                                                                                      0
                                                                                    ) {
                                                                                      peg$fail(
                                                                                        peg$c205
                                                                                      );
                                                                                    }
                                                                                  }
                                                                                  if (
                                                                                    s0 ===
                                                                                    peg$FAILED
                                                                                  ) {
                                                                                    if (
                                                                                      input.substr(
                                                                                        peg$currPos,
                                                                                        6
                                                                                      ) ===
                                                                                      peg$c206
                                                                                    ) {
                                                                                      s0 =
                                                                                        peg$c206;
                                                                                      peg$currPos += 6;
                                                                                    } else {
                                                                                      s0 =
                                                                                        peg$FAILED;
                                                                                      if (
                                                                                        peg$silentFails ===
                                                                                        0
                                                                                      ) {
                                                                                        peg$fail(
                                                                                          peg$c207
                                                                                        );
                                                                                      }
                                                                                    }
                                                                                    if (
                                                                                      s0 ===
                                                                                      peg$FAILED
                                                                                    ) {
                                                                                      if (
                                                                                        input.substr(
                                                                                          peg$currPos,
                                                                                          4
                                                                                        ) ===
                                                                                        peg$c208
                                                                                      ) {
                                                                                        s0 =
                                                                                          peg$c208;
                                                                                        peg$currPos += 4;
                                                                                      } else {
                                                                                        s0 =
                                                                                          peg$FAILED;
                                                                                        if (
                                                                                          peg$silentFails ===
                                                                                          0
                                                                                        ) {
                                                                                          peg$fail(
                                                                                            peg$c209
                                                                                          );
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}
